import React, {useEffect, useState} from 'react';import { useDispatch } from 'react-redux';import * as winnerAction from '../../store/actions/winners';import * as Game from '../../services/game-worker';import {clearPlayingField} from '../../services/dom-worker';import SettingsApi from '../../services/api-worker/SettingsApi';import Menu from './Menu';export default () => {    const dispatch = useDispatch();    const [selectedGameMode, setSelectedGameMode] = useState('');    const [inputUserName, setInputUserName] = useState('');    const [fetchGameMods, setFetchGameMods] = useState('');    const [growMenu, setGrowMenu] = useState(true);    const [winner, setWinner] = useState('');    const [showMessage, setShowMessage] = useState(false);    const startGame = async () => {        setGrowMenu(false);        const res = await Game.play(fetchGameMods[selectedGameMode]);        setWinner(res);        setShowMessage(true);        setGrowMenu(true);        const payload = {winner: res, userName: inputUserName};        dispatch(winnerAction.addWinners(payload))    };    const startGameAgain = async () => {        clearPlayingField();        await startGame();    };    const handleChangeSelect = event => {        setShowMessage(false);        setSelectedGameMode(event.target.value);    };    const handleChangeInput = event => {        setShowMessage(false);        setInputUserName(event.target.value);    };    useEffect(() => {        (async function fetchData() {            setFetchGameMods(await new SettingsApi().getSettings());        })();    }, []);    return (        <div>            {!fetchGameMods ?                <div/> :                <Menu                    growMenu={growMenu}                    fetchGameMods={fetchGameMods}                    inputUserName={inputUserName}                    selectedGameMode={selectedGameMode}                    winner={winner}                    showMessage={showMessage}                    handleChangeSelect={handleChangeSelect}                    handleChangeInput={handleChangeInput}                    startGame={startGame}                    startGameAgain={startGameAgain}                />            }            <div className="game-container"/>        </div>    )}